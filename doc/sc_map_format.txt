Dec 4th, 2014 :
===============

So close yet so far. 


Strike Commander maps are generated just after the installation.
The program to generate them all is MKTERR.EXE.
Using IDA, it seems a lot of floating operations occur there. A wild guess is
that they use the same technique as Frontier Elite game and use a set of seeds 
which combined together generated the terran. A combinations of harmonic could 
work.

MKTERR.EXE seems to be making two passes: 

    - Generate the 3D data.
    - Generate colors.

Could the color step be assigning a material based on elevation (snow, ground, land, sea)
and calculate the gouraud shading ? I cannot imagine hardware of the time calculate gouraud
shading for each 3D vertex visible on the map on the fly. That would make sense to 
precalculate them.


A map in Strike Commander is contained within a PAK archive:

ALASKA.PAK	
ARENA.PAK	    -> Training and dogfight
EUROPE.PAK	
MSFILES.PAK	    -> Unknown content
SANFRAN.PAK
ANDMAL1.PAK	
CANYON.PAK	
MAPDATA.PAK	
QUEBEC.PAK	
TURKEY.PAK
ANDMAL2.PAK	
EGYPT.PAK	
MAURITAN.PAK	
RHODEI.PAK

All PAKS have the same structural content:

- Index[0]: IFF File with chuncks:
      - TREA
      - TXMS: Reference textures used. Details of textures in TXM_LIST.IFF. Textures Data in TXMPACK.PAK.
      - ELEV
      - TRIS


- Index[1-3]: Three files with XXX entries each:
       - First  file entries are 2400 bytes
       - Second file entries are 600 bytes (Note: 600 = 2400/4)
       - Third  file entries are 150 bytes (Note: 150 =  600/4)

    Those files are obiously mipmaps....but of what ? 3D, precalculated gouraud ?  

- Index[4] :
       - .TRI file : Unknown content: Could it contain the elevation of evenly spaced vertices ?

- Index[5] :
	   - .OBJ file : Contains the OBJ name, 3D appearance and 3D coordinates in world space.

- Index[6] :
       - .AVG file : 

Note: All maps have the same AVG and index[1-3] file size. I think it is because all maps have the same dimensions.
That means data are not compressed ( a flat land would not have the same vertex resolution as a land with crevasses).
If vertex are evenly spaces on the map, that would mean only elevation are stored and 3D data is reconstructed at runtime.
Since RAM was so sparce in the 90s that would actually make a lot of sense to have a full 3 component vertex exist
only when it is about to be rendered to the screen.

Now, how spaced are the vertex informations ?
      .AVG could contains the average elevation for a block ?



Guild guesses :

According to the game palette, they are 16 shades of each colors. That would mean a precalculated
shade for a terran vertex would take 1/2 byte. 2400 bytes would give 4800 vertice shades.

Divisors of 4800 :

1, 2, 3, 4, 5, 6, 8, 10, 12, 15, 16, 20, 24, 25, 30, 32, 40, 48, 50, 60, 64, 75, 80, 96, 100, 
120, 150, 160, 192, 200, 240, 300, 320, 400, 480, 600, 800, 960, 1200, 1600, 2400, 4800

A block could be 80x60 vertice ? 

What about 300 :

Divisor : 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 25, 30, 50, 60, 75, 100, 150, 300

A block from far away would be 20X15 vertice ?


Terran color and vertices :
Is this information hard-coded somewhere and generated based on evelation ? 
high = snow  = white. 
low  = water = blue.
Maybe. And then just like for the jet, we would have a second set of triangles for the 
few one that have a textures ?

I think at the minimun the triangles must feature a color since there are missions in
 the desert or canyon area: Those colors could not be generated by elevation data alone.



Very interesting :
==================
.TRI file also contains 324 entries. Most of them have the same offset and I originally discarded them.
Could this be that there is a .TRI entry for a block only if it features textures ?


Analysis of MAURITIAN.TRI: Contains 3 files of 4,632 bytes each:

file format:
4 bytes
4 bytes

X numbers of 12 byte entry: 
===========================
Very likely vertices
2496 bytes / 3 = 832 vertices
0x9C0      /0x3  = 0x340




Followed by index table of 16 bytes entry:
==========================================

2 bytes index  vertex 1
2 bytes index  vertex 2
2 bytes index  vertex 3

I would expect a texture set indice and then a texture index for the texture in the set:
2 byte texture set
2 byte texture index.

2 byte uv
2 byte uv
2 byte uv

2128 bytes / 16  = 133 triangles
0x850       0x10 = 0x85



Dec 5th, 2014 :
===============

Crap, it did not work. i get an horrible mess. Let’s go do something else and come back to it later.

324 !! 324 !! 324 !! 324 !! :
=============================

I see the number 324 everywhere :

There are 324 entries in the .OBJ file.
There are 324 entries in the .TRI file.

The three mystery files (that probably contain 3D data now that I think about it)
also all contains 324 entries (with size 2400, 600 and 150) respectively.

I am slowly coming to the conclusion that MAPs are broken down in 324 areas. The engine
can then make fast lookup based on Axis Aligned boxes. And since sqrt(324) = 18, that
would make a square MAP 18*18 areas !

I cannot believe how I almost discarded this information ! The PAK reader I wrote was
discarding entry with size zero ! That means I almost completely missed this precious 324 information ! This is such a lucky shot !

Interestingly when you bring up the map in the game, you can see the marks from 0 to 18 on the horizontal markings ! I originally discard it as cosmetic stuff but it is actually helpful. The vertical mark start at A, B, C , etc… One thing that I should probably not discard is that the origin of the Axis are LOWER-LEFT !!!

Work Work Work

Haha, of course when I decide to not discard something it was wrong: Area origin
is upper left.

X coordinate = AREAID % 18
Y coordinate = AREAID / 18


Dimensions for the jets are in…..FEET !!!! ARRRGGG !!!!!

Back to .OBJ:

4 bytes
4 bytes
4 bytes -> This is the Y axis since all boats are at zero.

Note: Coordinate are in area space not map space.



The waypoints for the ARENA are in DATA/MISSIONS/TEMPLATE.IFF


MAJOR BREAKTHROUGH !!!!

I opened the 3 “mystery files” and saw a 6 bytes pattern.
150/6  =  25 vertice  : Perfect for a  5x5  map
600/6  = 100 vertices : Perfect for a 10x10 map
2400/6 = 400 vertices : Perfect for a 20x20 map
 

So, what that means is that we have (at the highest level of details) :

18*20 = 360 vertices wide.
18*20 = 360 vertices tall.

360*360 = 129,600 vertices for a map.

Low level:

18*5 = 90 vertices wide
18*5 = 90 vertices tall

90*90 = 8100 vertices for a map.


Dec 7th, 2014 :
===============

I am so happy, I managed to get the vertices around 4AM: The mystery files were indeed the 3D data. Each entry is
a heigh in a height map. Entries are 6 bytes long:

2 bytes: Elevation
2 bytes unknown.
2 bytes unknown.

Using that I was able to see AREA.PAK with the gorgeous mountain, canyons, see. I think the last 2 byte have
to do with texturing: I notice a lot of vertices are set where the Arena city is. Now is the color in there or is it 
determined at runtime ?

I have also reverse engineered the AVG file. The size was 648 which was obviously 324*2 (once you have the key 324 value so MANY things become clear). So there are 2 byte per block and it gives the AVERAGE elevation for the block.
I have no idea what it is used for.


I need two things to finally render the map beautifully:
 - Color: Vertex color: Is this in the file or generated on the fly ?
 - Texture: Where are the texture ID and texture coordinate ?

In order to improve rendering speed, I would be tempted to assume everything is in the file and ready to be used. 
4 byte is enough for a color palette index. And it is also enough for texture:
1 byte for textureSet ID
1 byte for textureID in the set.
1 byte for U coordinate
1 byte for V coordinate

I think i should go back to TMX.PAK and study how texture set are working, what it the texture size and if one byte could contains both U and V.

An other vector of attack would be to try to see if the gouraud shading was recalculated and stored there.

I have a MAP viewer now but I need to work on something that will let me move and look everywhere. That would help a lot.

Tired to work on the MAP, I did not improve much today. Let’s focus on the .TRI instead.
It seems that all .TRI features 3 files of 4632 bytes organized as follow :

2496/12 = 208 vertices
1890/6  = 315 triangles
238/2   = 119 references to triangles ?



Dec 7th, 2014 :
===============

One more major advancement !!! I have identified the terrain type flag. For now
I have hardcoded the colors. I need to find where they are defined:

#define LAND_TYPE_SEA    0
#define LAND_TYPE_DESERT 1
#define LAND_TYPE_GROUND 2
#define LAND_TYPE_PRAIRI 3
#define LAND_TYPE_TAIGA  4
#define LAND_TYPE_TUNDRA 5
#define LAND_TYPE_SNOW   6

I also think I know how the textures are applied. Two flags:
 - Texture SET.
 - Texture ID in the set.

If I am correct they I would be left with one more byte in the heightmap entries that I
cannot identify. Could it be a recalculated shade ? The increase in values does look progressive when I use that value instead of the height.

So if I am done with the 3D data….and I also have the objects. Then what the HECK is in 
this .TRI file that I cannot decrypt ?????!??! Probably the texture that are
not induced by a type change (like the city in ARENA ?) 

How is the TXM pack organized: 

6 textures: SEA to PRAIRI (WITH BEACH)
6 textures: SEA to TAIGA  (escarpment and ROCK)
6 textures: TUNDRA  to SNOW
6 textures: TAIGA to TUNDRA 
6 textures: TAIGA to GROUND 
6 textures: PRAIRY to TUNDRA
6 textures: TUDNRA TO TRANSPARENT
6 textures: PRAIRI to TAIGA
6 textures: GROUND to TAIGA
6 textures: DESERT to PRAIRY
6 textures: GROUND to PRAIRI
6 textures: DESERT to GROUND

SHORTER TRANSITIONS of the previous
6 textures: SEA to PRAIRI (WITH BEACH)
6 textures: SEA to TAIGA  (escarpment and ROCK)
6 textures: TUNDRA  to SNOW
6 textures: TAIGA to TUNDRA 
6 textures: TAIGA to GROUND 
6 textures: PRAIRY to TUNDRA
6 textures: TUDNRA TO TRANSPARENT
6 textures: PRAIRI to TAIGA
6 textures: GROUND to TAIGA
6 textures: DESERT to PRAIRY
6 textures: GROUND to PRAIRI
6 textures: DESERT to GROUND
+++++++++++++
6 textures: Sea-Beach-ground
6 textures: Sea-Escarpment-ground


Ilot textures (rocks, land, etc….)


6 textures: SEA TO CITY.
1 BROKEN TEXTURE: City
1 BROKEN TEXTURE: City
1 City texture
3 textures farming
12 textures river

1 BROKEN TEXTURE country side
1 texture country side
1 BROKEN TEXTURE desert
1 BROKEN TEXTURE desert
3 crop circles textures

1 textures road
1 textures road BROKEN

12 textures airstrip
1 textures  09
1 textures  18
1 textures  27
1 textures  36

1 impact texture BROKEN
1 impact texture BROKEN
1 impact texture BROKEN
1 impact texture
1 impact texture SNOW/TRANSPARENT
1 impact texture TUNDRA/GROUND
1 impact texture TAIGA/PRAIRIE
1 impact texture ?????/DESERT
1 impact texture BROKEN



4PM: YEA ! I have found where the SHADE is. The map did have precomputed gouraud
shading…but it looks like it was is 8 levels of shades instead of the 16 I was expecting.
I guess it was to give room for close up dithering shading ???
